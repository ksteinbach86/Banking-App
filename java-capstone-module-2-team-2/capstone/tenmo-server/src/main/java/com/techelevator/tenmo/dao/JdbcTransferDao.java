package com.techelevator.tenmo.dao;



import com.techelevator.tenmo.model.Transfer;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Component;
import java.util.ArrayList;
import java.util.List;


/*

THE JDBC_name_Dao makes it possible to do these things within an application:
establish a connection with a data source,
send queries and update statements, as well as processing results.

 */

@Component
public class JdbcTransferDao implements TransferDao {

    private JdbcTemplate jdbcTemplate;

    public JdbcTransferDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void createTransfer(Transfer transfer) {
        String sql = "INSERT INTO transfers (transfer_id, transfer_type_id, transfer_status_id, " +
                "account_from, account_to, amount) VALUES (?, ?, ?, ?, ?, ?)";

        jdbcTemplate.update(sql, transfer.getTransferId(), transfer.getTransferTypeId(),
                transfer.getTransferStatusId(), transfer.getAccountFrom(), transfer.getAccountTo(), transfer.getAmount());
    }

    @Override
    public List<Transfer> getTransfer(int transferId) {
        Transfer transfer = null;
        String sql = "SELECT transfer_id, transfer_type_id, transfer_status_id, account_from, account_to, amount " +
                "FROM transfer " +
                "WHERE transfer_id = ?;";
        SqlRowSet results = jdbcTemplate.queryForRowSet(sql, transferId);
        if (results.next()) {
            transfer = mapRowToTransfer(results);
        }
        return getTransfer(transferId);
    }

    @Override
    public List<Transfer> getTransfersByUserId(int userId) {
        String sql = " SELECT transfer_id, account_from, account_to, transfer_type_id,  transfer_status_id, amount" +
                "    JOIN account ON account.account_id = transfer.account_to" +
                "    JOIN tenmo_user ON tenmo_user.user_id = account.user_id";
        SqlRowSet results = jdbcTemplate.queryForRowSet(sql, userId);
        List<Transfer> transfers = new ArrayList<>();

        while(results.next()) {
            transfers.add(mapRowToTransfer(results));
        }
        return transfers;
    }

    public Transfer getTransferByTransferId(int transferId) {
        String sql = "SELECT transfer_id, transfer_type_id, transfer_status_id, account_from, account_to, amount " +
                "FROM transfers WHERE transfer_id = ?";
        SqlRowSet result = jdbcTemplate.queryForRowSet(sql, transferId);
        Transfer transfer = null;

        if(result.next()){
            transfer = mapRowToTransfer(result);
        }

        return transfer;
    }

    @Override
    public void updateTransfer(Transfer transfer) {
        String sql = "UPDATE transfers " +
                "SET transfer_status_id = ? " +
                "WHERE transfer_id = ?";

        jdbcTemplate.update(sql, transfer.getTransferStatusId(), transfer.getTransferId());
    }

    private Transfer mapRowToTransfer(SqlRowSet results) {
        int transferId = results.getInt("transfer_id");
        int transferTypeId = results.getInt("transfer_type_id");
        int transferStatusId = results.getInt("transfer_status_id");
        int accountFrom = results.getInt("account_from");
        int accountTo = results.getInt("account_to");
        double amount = results.getInt("amount");

        Transfer transfer = new Transfer(transferId, transferTypeId, transferStatusId, accountFrom, accountTo, amount);

        return transfer;
    }






    // sending a transfer

///// In the section im creating a method for sending TODO---


//    public Transfer addTransfer(Transfer newTransfer) {
//        // Create the Transfer we want to return
//        Transfer returnedTransfer = null;
//
//        // Create the package with headers and body and such for the HTTP request
//        HttpHeaders headers = new HttpHeaders();
//        headers.setContentType(MediaType.APPLICATION_JSON);
//        HttpEntity<Transfer> entity = new HttpEntity<>(newTransfer, headers);
//
//        // Try to execute the REST request. If it fails, it will throw an error
//        try {
//            returnedTransfer = restTemplate.postForObject(API_BASE_URL + "transfers", entity,
//                    Transfer.class);
//        }
//        catch (RestClientResponseException e) {
//            // Errors generated by the server
//            BasicLogger.log(e.getRawStatusCode() + " : " + e.getStatusText());
//        }
//        catch (ResourceAccessException e) {
//            // Errors when you can't get to the server
//            BasicLogger.log(e.getMessage());
//        }
//
//        // Return either null (on error) or the Transfer returned in response
//        return returnedTransfer;
//
//    // list of all transfers---
//
//        public Transfer[] listTransfers() {
//            Transfer[] Transfer = null;
//            try {
//                transfer = restTemplate.getForObject(API_BASE_URL + "transfer", Transfer[].class);
//            } catch (RestClientResponseException e) {
//                // handles exceptions thrown by rest template and contains status codes
//                BasicLogger.log(e.getRawStatusCode() + " : " + e.getStatusText());
//            } catch (ResourceAccessException e) {
//                // i/o error, ex: the server isn't running
//                BasicLogger.log(e.getMessage());
//            }
//            return transfer;
//
//            }
//        }
//
//    // list of transfers by user id
//
//    @RequestMapping(path = "/Transfer/{id}/", method = RequestMethod.GET)
//    public List<Transfer> findByTransferId(@PathVariable int id) {
//        return transferDao.findByTransfer(id);
//
//    }
//
//    // create transfer
//
//    @RequestMapping(path = "/transfer/{id}/", method = RequestMethod.GET)
//    public List<Transfer> findByTransfer(@PathVariable int id) {
//        return TransferDao.findByTransfer(id);
//
//
//        // update transfer
//
//        public boolean updateReservation (Transfer updatedTransfer){
//            boolean returnValue = false;
//
//            // Package up our HTTP request
//            HttpHeaders headers = new HttpHeaders();
//            headers.setContentType(MediaType.APPLICATION_JSON);
//            HttpEntity<Tansfer> entity = new HttpEntity<Transfer>(updatedTransfer, headers);
//
//            try {
//                restTemplate.put(API_BASE_URL + "Transfer/" + updatedTransfer.getId(), entity);
//                returnValue = true;
//            } catch (RestClientResponseException e) {
//                // Errors generated by the server
//                BasicLogger.log(e.getRawStatusCode() + " : " + e.getStatusText());
//            } catch (ResourceAccessException e) {
//                // Errors when you can't get to the server
//                BasicLogger.log(e.getMessage());
//            }
//
//            return returnValue;

        }



